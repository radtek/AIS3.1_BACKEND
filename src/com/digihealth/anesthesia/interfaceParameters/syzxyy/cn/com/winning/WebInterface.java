package com.digihealth.anesthesia.interfaceParameters.syzxyy.cn.com.winning;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * This class was generated by Apache CXF 3.1.8
 * 2018-03-27T16:20:17.181+08:00
 * Generated source version: 3.1.8
 * 
 */
@WebServiceClient(name = "WebInterface", 
                  wsdlLocation = "http://172.20.13.45:8065/WebInterface.asmx?wsdl",
                  targetNamespace = "http://www.winning.com.cn/") 
public class WebInterface extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://www.winning.com.cn/", "WebInterface");
    public final static QName WebInterfaceSoap12 = new QName("http://www.winning.com.cn/", "WebInterfaceSoap12");
    public final static QName WebInterfaceSoap = new QName("http://www.winning.com.cn/", "WebInterfaceSoap");
    public final static QName WebInterfaceHttpPost = new QName("http://www.winning.com.cn/", "WebInterfaceHttpPost");
    public final static QName WebInterfaceHttpGet = new QName("http://www.winning.com.cn/", "WebInterfaceHttpGet");
    static {
        URL url = null;
        try {
            url = new URL("http://172.20.13.45:8065/WebInterface.asmx?wsdl");
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(WebInterface.class.getName())
                .log(java.util.logging.Level.INFO, 
                     "Can not initialize the default wsdl from {0}", "http://172.20.13.45:8065/WebInterface.asmx?wsdl");
        }
        WSDL_LOCATION = url;
    }

    public WebInterface(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public WebInterface(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public WebInterface() {
        super(WSDL_LOCATION, SERVICE);
    }
    
    public WebInterface(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    public WebInterface(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    public WebInterface(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }    




    /**
     *
     * @return
     *     returns WebInterfaceSoap
     */
    @WebEndpoint(name = "WebInterfaceSoap12")
    public WebInterfaceSoap getWebInterfaceSoap12() {
        return super.getPort(WebInterfaceSoap12, WebInterfaceSoap.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns WebInterfaceSoap
     */
    @WebEndpoint(name = "WebInterfaceSoap12")
    public WebInterfaceSoap getWebInterfaceSoap12(WebServiceFeature... features) {
        return super.getPort(WebInterfaceSoap12, WebInterfaceSoap.class, features);
    }


    /**
     *
     * @return
     *     returns WebInterfaceSoap
     */
    @WebEndpoint(name = "WebInterfaceSoap")
    public WebInterfaceSoap getWebInterfaceSoap() {
        return super.getPort(WebInterfaceSoap, WebInterfaceSoap.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns WebInterfaceSoap
     */
    @WebEndpoint(name = "WebInterfaceSoap")
    public WebInterfaceSoap getWebInterfaceSoap(WebServiceFeature... features) {
        return super.getPort(WebInterfaceSoap, WebInterfaceSoap.class, features);
    }


    /**
     *
     * @return
     *     returns WebInterfaceHttpPost
     */
    @WebEndpoint(name = "WebInterfaceHttpPost")
    public WebInterfaceHttpPost getWebInterfaceHttpPost() {
        return super.getPort(WebInterfaceHttpPost, WebInterfaceHttpPost.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns WebInterfaceHttpPost
     */
    @WebEndpoint(name = "WebInterfaceHttpPost")
    public WebInterfaceHttpPost getWebInterfaceHttpPost(WebServiceFeature... features) {
        return super.getPort(WebInterfaceHttpPost, WebInterfaceHttpPost.class, features);
    }


    /**
     *
     * @return
     *     returns WebInterfaceHttpGet
     */
    @WebEndpoint(name = "WebInterfaceHttpGet")
    public WebInterfaceHttpGet getWebInterfaceHttpGet() {
        return super.getPort(WebInterfaceHttpGet, WebInterfaceHttpGet.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns WebInterfaceHttpGet
     */
    @WebEndpoint(name = "WebInterfaceHttpGet")
    public WebInterfaceHttpGet getWebInterfaceHttpGet(WebServiceFeature... features) {
        return super.getPort(WebInterfaceHttpGet, WebInterfaceHttpGet.class, features);
    }

}
