package com.digihealth.anesthesia.interfaceParameters.yxrm.tempuri;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * This class was generated by Apache CXF 3.1.8
 * 2018-04-11T09:25:10.778+08:00
 * Generated source version: 3.1.8
 * 
 */
@WebServiceClient(name = "Operation", 
                  wsdlLocation = "http://192.168.3.66:8090/Operation.asmx?wsdl",
                  targetNamespace = "http://tempuri.org/") 
public class Operation extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://tempuri.org/", "Operation");
    public final static QName OperationHttpGet = new QName("http://tempuri.org/", "OperationHttpGet");
    public final static QName OperationHttpPost = new QName("http://tempuri.org/", "OperationHttpPost");
    public final static QName OperationSoap = new QName("http://tempuri.org/", "OperationSoap");
    public final static QName OperationSoap12 = new QName("http://tempuri.org/", "OperationSoap12");
    static {
        URL url = null;
        try {
            url = new URL("http://192.168.3.66:8090/Operation.asmx?wsdl");
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(Operation.class.getName())
                .log(java.util.logging.Level.INFO, 
                     "Can not initialize the default wsdl from {0}", "http://192.168.3.66:8090/Operation.asmx?wsdl");
        }
        WSDL_LOCATION = url;
    }

    public Operation(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public Operation(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public Operation() {
        super(WSDL_LOCATION, SERVICE);
    }
    
    public Operation(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    public Operation(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    public Operation(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }    




    /**
     *
     * @return
     *     returns OperationHttpGet
     */
    @WebEndpoint(name = "OperationHttpGet")
    public OperationHttpGet getOperationHttpGet() {
        return super.getPort(OperationHttpGet, OperationHttpGet.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns OperationHttpGet
     */
    @WebEndpoint(name = "OperationHttpGet")
    public OperationHttpGet getOperationHttpGet(WebServiceFeature... features) {
        return super.getPort(OperationHttpGet, OperationHttpGet.class, features);
    }


    /**
     *
     * @return
     *     returns OperationHttpPost
     */
    @WebEndpoint(name = "OperationHttpPost")
    public OperationHttpPost getOperationHttpPost() {
        return super.getPort(OperationHttpPost, OperationHttpPost.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns OperationHttpPost
     */
    @WebEndpoint(name = "OperationHttpPost")
    public OperationHttpPost getOperationHttpPost(WebServiceFeature... features) {
        return super.getPort(OperationHttpPost, OperationHttpPost.class, features);
    }


    /**
     *
     * @return
     *     returns OperationSoap
     */
    @WebEndpoint(name = "OperationSoap")
    public OperationSoap getOperationSoap() {
        return super.getPort(OperationSoap, OperationSoap.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns OperationSoap
     */
    @WebEndpoint(name = "OperationSoap")
    public OperationSoap getOperationSoap(WebServiceFeature... features) {
        return super.getPort(OperationSoap, OperationSoap.class, features);
    }


    /**
     *
     * @return
     *     returns OperationSoap
     */
    @WebEndpoint(name = "OperationSoap12")
    public OperationSoap getOperationSoap12() {
        return super.getPort(OperationSoap12, OperationSoap.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns OperationSoap
     */
    @WebEndpoint(name = "OperationSoap12")
    public OperationSoap getOperationSoap12(WebServiceFeature... features) {
        return super.getPort(OperationSoap12, OperationSoap.class, features);
    }

}
